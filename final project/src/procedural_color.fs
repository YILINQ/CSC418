// Set the pixel color to an interesting procedural color generated by mixing
// and filtering Perlin noise of different frequencies.
//
// Uniforms:
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
// Inputs:
in vec3 sphere_fs_in;
in vec3 normal_fs_in;
in vec4 pos_fs_in; 
in vec4 view_pos_fs_in; 
// Outputs:
out vec3 color;

// expects: blinn_phong, perlin_noise
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
  vec3 ka;
  vec3 kd;
  vec3 ks = vec3(0, 0.5, 0.5);
  float p = 900;


 
  vec4 view_direction = view * view_pos_fs_in;
  

  float light_theta = animation_seconds * M_PI / 2;
  mat4 rotation = mat4(cos(light_theta), 0, sin(light_theta), 0,
   0, 1.0, 0, 0,
   -sin(light_theta), 0, cos(light_theta), 0,
   0, 0, 0, 1.0);

  vec3 l = ((view * vec4(1, 0, 0, 0))).xyz;
  vec3 v = view_direction.xyz;



  ka = vec3(0.01, 0.02, 0.15);
  kd = vec3(0.2, 0.3, 0.8);
  ks = vec3(0.8,0.8,0.8);
  if(is_moon) {
    ka = vec3(0.03, 0.03, 0.03);
    kd = vec3(0.5, 0.5, 0.5);
    ks = vec3(0.8,0.8,0.8);
  }
  // the following idea is from:
  // https://lodev.org/cgtutor/randomnoise.html
  float noise = 0; 
  vec3 f = vec3(3.5, 21.3, 2);
  vec3 a = vec3(10.5, 11.3, 30.5);
  a = a / (a.x + a.y + a.z);
  vec3 s = sphere_fs_in;
  noise = (1 - 0.2) * perlin_noise(s * f * a) + 0.18 * perlin_noise(s * a);
  noise = abs(noise * M_PI);
  kd *= (noise) + 0.3;
  ka *= (noise) + 0.5;
  color = blinn_phong(ka, kd, ks, p, normal_fs_in, v, l);
  /////////////////////////////////////////////////////////////////////////////
}
