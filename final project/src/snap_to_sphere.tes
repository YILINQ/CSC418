// Hint: Crib from your model_view_projection.vs
// Layout:
//                                         Indicate that we're dealing with
//                                         triangles in CCW order and using a
//                                         sane spacing.
layout(triangles, equal_spacing, ccw) in;
// Uniforms
uniform mat4 view;
uniform mat4 proj;
uniform float animation_seconds;
uniform bool is_moon;
uniform bool is_luna;
uniform bool is_lina;
uniform bool is_mirana;
uniform bool is_lanaya;
uniform bool is_motrai;
// Inputs:
//                    array of 3 3D patch corner positions
in vec4 pos_es_in[];
// Outputs:
//                   projected, view, and model transformed 3D position
out vec4 pos_fs_in;
//                        view and model transformed 3D position
out vec4 view_pos_fs_in;
//                      view and model transformed 3D normal
out vec3 normal_fs_in;
//                      3D position _before_ applying model, view or projection
//                      transformations (e.g., point on unit sphere)
out vec3 sphere_fs_in;
// expects: interpolat, model, 
void main()
{
  /////////////////////////////////////////////////////////////////////////////
  // Replace with your code 
   pos_fs_in = interpolate(gl_TessCoord, pos_es_in[0], pos_es_in[1], pos_es_in[2]);
   float theta = M_PI * animation_seconds / 2;
   mat4 shift = translate(vec3(2, 0, 0));
   mat4 models = model(is_moon, is_luna, is_mirana, is_lina, is_lanaya, is_motrai, animation_seconds);
   sphere_fs_in = normalize(pos_fs_in.xyz);
   view_pos_fs_in = view * models * vec4(sphere_fs_in, 1.0);
   normal_fs_in = normalize((inverse(transpose(view * models)) * vec4(sphere_fs_in.xyz, 1.0)).xyz);
   pos_fs_in = proj * view_pos_fs_in;
   
  gl_Position = pos_fs_in;
  /////////////////////////////////////////////////////////////////////////////
}


